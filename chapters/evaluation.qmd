---
title: "CritÃ¨res d'Ã©valuation"
author: "Romain Avouac et Lino Galiana"
description: |
  <br>
  RÃ©sumÃ© des critÃ¨res d'Ã©valuation
image: https://minio.lab.sspcloud.fr/lgaliana/generative-art/pythonds/kid.png
order: 10
href: chapters/evaluation.html
eval: true
echo: false
---

Le cours est Ã©valuÃ© avec deux rendus :  

- dans un premier temps, en groupe de 2 ou 3, il faudra choisir un projet personnel, le rendre conforme aux bonnes pratiques, choisir un format de valorisation, dÃ©ployer sur une infra de production 
- dans un second temps, les Ã©tudiants se placeront dans le rÃ´le dâ€™un _data scientist_ qui vÃ©rifie la qualitÃ© des contributions Ã  un projet et devront individuellement Ã©valuer un des projets dâ€™un autre groupe (peer review), critiquer les choix techniques et les bonnes pratiques mises en Å“uvre 

## CritÃ¨res pour le projet

```{ojs}
viewof choice = Inputs.checkbox(
    d3.group(choice_parameters, d => d.level), 
    {key: ["Indispensable ðŸ‘®", "Bien ðŸ˜Ž", "Excellent ðŸ¤©"], label: "Niveau souhaitÃ©"}
)
```



```{ojs}
viewof project = Inputs.checkbox(
    d3.group(
        choice_parameters.filter(d => d.project != "all").filter(row => uniqueLevels.includes(row.level)),
        d => d.project
    ),
    {key: ["Site web statique", "API", "Application interactive", "Publication reproductible"], label: "Type d'output"}
)
```

```{ojs}
html`<div>${formatToCheckboxLists(
    liste_tableau.filter(row => uniqueLevels.includes(row.level))
)}</div>`
```


## Structure d'exemple

```{ojs}
viewof choice2 = Inputs.checkbox(
    d3.group(choice_parameters, d => d.level), 
    {key: uniqueLevels, label: "Niveau souhaitÃ©"}
)
```



```{ojs}
viewof project2 = Inputs.checkbox(
    d3.group(
        choice_parameters.filter(d => d.project != "all").filter(row => uniqueLevels.includes(row.level)),
        d => d.project
    ),
    {key: ["Site web statique", "API", "Application interactive", "Publication reproductible"], label: "Type d'output"}
)
```


```{ojs}
html`<div>${
    generateFolderStructure(
        liste.filter(row => uniqueLevels2.includes(row.level))
        )
}</div>`
```

<!-----
intermediaire
---->


```{ojs}
uniqueLevels = Array.from(new Set(choice.flatMap(group => group.map(item => item.level))));
```

```{ojs}
uniqueLevels2 = Array.from(new Set(choice2.flatMap(group => group.map(item => item.level))));
```


```{ojs}
function formatToCheckboxLists(rows) {
    // Dynamically create levels based on the input data
    const levels = rows.reduce((acc, row) => {
        if (!acc[row.level]) {
            acc[row.level] = [];
        }
        acc[row.level].push(row.element);
        return acc;
    }, {});

    // Function to create HTML for checkboxes
    const createCheckboxesHtml = (elements, level) => {
        if (elements.length === 0) {
            return ''; // Skip levels with no elements
        }
        return `
            <div>
                <h3>${level}</h3>
                <ul>
                    ${elements.map(element => `<li><input type="checkbox" id="${element}" name="${level}"><label for="${element}">${element}</label></li>`).join('')}
                </ul>
            </div>
        `;
    };

    // Combine all levels into a single HTML string
    return Object.entries(levels).map(([level, elements]) => createCheckboxesHtml(elements, level)).join('');
}
```

```{ojs}
function generateFolderStructure(jsonData) {
    // Create a map to group subfiles by their parent files
    const fileMap = new Map();

    jsonData.forEach(item => {
        if (item.file) {
            // Splitting the file string into an array and trimming spaces
            const filesArray = item.file.split(',').map(file => file.trim());

            filesArray.forEach(file => {
                if (!fileMap.has(file)) {
                    fileMap.set(file, []);
                }
                if (item.subfiles) {
                    // Splitting the subfiles string into an array and trimming spaces
                    const subfilesArray = item.subfiles.split(',').map(subfile => subfile.trim());
                    fileMap.get(file).push(...subfilesArray);
                }
            });
        }
    });

    // Sort parent files
    const sortedFiles = Array.from(fileMap.keys()).sort((a, b) => a.localeCompare(b));

    let structure = "<pre><code>project\n";

    sortedFiles.forEach((file, index, array) => {
        const isLastItem = index === array.length - 1;
        const filePrefix = isLastItem ? "â””â”€â”€ " : "â”œâ”€â”€ ";
        structure += `${filePrefix}${file}\n`;

        const subfiles = fileMap.get(file);
        if (subfiles.length) {
            subfiles.forEach((subfile, subIndex, subArray) => {
                const subIsLastItem = subIndex === subArray.length - 1;
                const subPrefix = subIsLastItem ? "    â””â”€â”€ " : "    â”œâ”€â”€ ";
                structure += `${subPrefix}${subfile}\n`;
            });
        }
    });

    structure += "</code></pre>";
    return structure;
}
```

```{ojs}
db = DuckDBClient.of({
  input: FileAttachment("evaluation.json")
})
choice_parameters = db.query(`SELECT DISTINCT level, project FROM input`)
liste = db.query(`SELECT * FROM input`)
liste_tableau = db.query(`SELECT DISTINCT element, level FROM input`)
```

```{ojs}
import {bind} from "@observablehq/synchronized-inputs"
```